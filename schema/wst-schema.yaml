$schema: "https://json-schema.org/draft/2020-12/schema"
title: JsonSchema for WST configuration
type: object
properties:
  version:
    title: WST configuration version
    description: The current version is 1.0. Internally the value is converted to string but number is accepted.
    type: [ string, number ]
  name:
    title: WST project name
    description: The name should be short as it might be used in some messages produced by WST.
    type: string
  description:
    title: WST project description
    description: The description should describe project purpose.
    type: string
  sandboxes:
    $ref: '#/$defs/sandboxes'
  servers:
    $ref: '#/$defs/servers'
  spec:
    $ref: '#/$defs/spec'

$defs:
  parameters:
    title: Parameters object
    description: |
      The parameters object is a map of parameters provided in various parts for customization. It can be a nested map
      if needed creating some sort of a tree structure. The leaves are always scalar values.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        oneOf:
          - type: [ string, number, boolean ]
          - $ref: '#/$defs/parameters'

  headers:
    title: HTTP Headers
    description: Map of HTTP headers where key is header name and value is its value.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        title: Header value
        type: string

  outputExpectation:
    title: Output expectation action
    description: |
      The output expectation checks service output usually containing the service logs. In that way it is possible to
      check expected service behavior.
    type: object
    properties:
      order:
        title: Expected order of messages
        description: |
          The order defines order of messages if there are more messages in the array. It sets whether those messages
          need to be in specified order (fixed) or it can be in any order (random).
        type: string
        enum: [ fixed, random ]
        default: fixed
      match:
        title: Match type for each message
        type: string
        enum: [ exact, regexp ]
        default: exact
      messages:
        title: Array of expected messages
        type: array
        items:
          title: Message item
          description: |
            The message item is a string which should be either exact string to or a regular expression that needs to
            match the actual string.
          type: string
      render_template:
        title: Template rendering switch
        description: The switch selects whether the template rendering is used for messages.
        type: boolean
        default: true

  responseExpectation:
    title: Response expectation action
    description: |
      The response expectation allows verifying the response from the selected request.
    type: object
    properties:
      request:
        title: Request ID
        description: |
          The request ID identifies the request whose response is checked in this expectation. The default last value
          is matches the default request ID of the request action which means that if there is just one request being
          done and its ID is unchanged, then there is no need to specify this property.
        type: string
        default: last
      headers:
        $ref: '#/$defs/headers'
      body:
        title: Response body to match
        description: |
          The response body is the expected body for the response
        type: [ object, string ]
        properties:
          content:
            title: Response body content to match
            description: |
              The content represent the content or pattern that needs to match the actual request response. It should
              be a string but number is also allowed for easier configuration if only number is returned.
            type: [ string, number ]
          match:
            title: Match type for content
            type: string
            enum: [ exact, regexp ]
            default: exact
          render_template:
            title: Template rendering switch
            description: The switch selects whether the template rendering is used for body content.
            type: boolean
            default: true

  expectation:
    title: Expectation action
    description: |
      The expectation is an action type that checks whether the supplied expectation type is expected. It is usually
      used for pattern matching of response data or matching output of the logs.
    type: object
    allOf:
      - properties:
          parameters:
            $ref: '#/$defs/parameters'
      - oneOf:
          - properties:
              output:
                $ref: '#/$defs/outputExpectation'
          - properties:
              response:
                $ref: '#/$defs/responseExpectation'

  expectations:
    title: Expectations mapping
    description: |
      The expectation mapping object allows defining custom expectation that can be executed by actions. As noted in
      the actions description, the action name can be composed from various parts. In the case of expectation, it is
      in the following format:
      
      expect[/<server_name>/<expectation_name>]
      
      The service_name is the name of the server where the expectation is defined and expectation_name is the name
      matching key of this object.
    type: object
    additionalProperties:
      $ref: '#/$defs/expectation'

  sandboxEvent:
    title: Sandbox event
    description: |
      The sandbox event defines how to action specific sandbox event on the service. Currently it allows definition of
      command, signal or native event.
    type: object
    oneOf:
      - properties:
          native:
            title: Native sandbox event
            description: |
              The native event is sandbox provided method for specific event. For example it is used for containers
              to natively restart the application.
            type: object
            properties:
              event:
                title: 'Native sandbox event type'
                type: string
                enum: ['start', 'restart', 'stop']
      - properties:
          command:
            title: Command sandbox event
            description: The shell command that is executed.
            type: object
            oneOf:
              - properties:
                  executable:
                    title: Program path to execute
                    description: The executable is a single program to execute
                    type: string
                  args:
                    title: Program arguments.
                    description: |
                      The arguments can be either string in which case shell is used or array or string which executes
                      the program directly without using the shell.
                    type: [string, array]
                    items:
                      type: string
              - properties:
                  shell:
                    title: Full shell command
                    description: It is stringified executable and args.
                    type: string
      - properties:
          signal:
            title: Signal sandbox event
            description: |
              The signal to send to the sandbox service. It uses service PID to do the signal on. Note that the service
              needs to be running so it cannot be used for start event.
            type: string

  commonSandbox:
    title: Common sandbox events
    description: |
      This defines set of common sandbox events to do. Those are start, stop and reload which are called actions.
    type: object
    properties:
      events:
        type: object
        properties:
          start:
            $ref: '#/$defs/sandboxEvent'
          stop:
            $ref: '#/$defs/sandboxEvent'
          reload:
            $ref: '#/$defs/sandboxEvent'

  containerSandbox:
    title: Container sandbox events
    description: The container sandbox is a parent sandbox for all sandboxes that run OCI containers.
    allOf:
      - $ref: '#/$defs/commonSandbox'
      - title: Container specific properties
        type: object
        properties:
          image:
            oneOf:
              - title: Image name and tag
                type: string
              - type: object
                properties:
                  name:
                    title: Image name
                    type: string
                  tag:
                    title: Image tag
                    type: string
          registry:
            title: Container registry
            description: This is used to pull and push images to.
            type: object
            properties:
              auth:
                title: Registry authentication credentials
                type: object
                properties:
                  username:
                    title: Registry user username
                    type: string
                  password:
                    title: Registry user password
                    type: string

  sandboxes:
    title: Sandboxes defitions
    description:
      Sandboxes can be specified either as an object defining the used sandboxes or as a string which is a path to
      fetch sandboxes definitions from.
    type: [ object, string ]
    properties:
      common:
        $ref: '#/$defs/commonSandbox'
      local:
        $ref: '#/$defs/commonSandbox'
      docker:
        $ref: '#/$defs/containerSandbox'
      kubernetes:
        allOf:
          - $ref: '#/$defs/containerSandbox'
          - type: object
            properties:
              auth:
                title: Kubernetes authentication
                type: object
                properties:
                  kubeconfig:
                    title: Kubernetes config file path
                    type: string

  server:
    title: Server
    description: |
      The server can be specified either as an object defining the server properties or as a server name only.
    type: [ object, string ]
    properties:
      extends:
        title: Parent server name
        description: This selects the server to select server from
        type: string
      name:
        title: Server name
        type: string
      configs:
        title: Configuration files
        type: object
        additionalProperties:
          type: object
          properties:
            file:
              type: string
            parameters:
              $ref: '#/$defs/parameters'
      parameters:
        $ref: '#/$defs/parameters'
      expectations:
        $ref: '#/$defs/expectations'
      sandboxes:
        $ref: '#/$defs/sandboxes'

  servers:
    title: Server
    description: |
      The servers can be specified either as an object defining each server or as a string which is a path to
      fetch server servers from.
    type: [ object, string ]
    patternProperties:
      "^[a-z][a-z0-9-_]+$":
        $ref: '#/$defs/server'

  instance:
    title: Instance object
    description: |
      The instance defines scripts, services and action used on them. This can be used for defining tests and other
      things.
    type: object
    properties:
      scripts:
        title: Scripts for inclusion to services
        description: |
          Scripts represent set of files where name is an object key and the actual content is the value. Those scripts
          can be linked to services.
        type: object
        additionalProperties:
          type: string
      services:
        title: Set of instance specific services
        description: The services represent object of services where key is its name and value is a service object.
        type: object
        additionalProperties:
          title: Service to run
          description: The service is a combination of server and sandbox with supplied configuration.
          type: object
          properties:
            server:
              title: Server to use.
              description: |
                Server points to the server used by service. As server defines the configuration, it is important to
                make sure that a compatible server is used. The service name is used if the value is not specified.
              type: string
            sandbox:
              title: Sandbox to use.
              description: |
                Sandbox should define server sandbox to run service in.
              default: local
              type: string
              enum: [ local, docker, kubernetes ]
            scripts:
              title: Scripts included to the service
              description: |
                The scripts can have either boolean or array value. If boolean is provided, then true means that all
                scripts are included to the service and false means that no script are be included. If array is
                provided, then only the listed scripts are included to the service.
              default: true
              type: [ array, boolean ]
              items:
                type: string
            configs:
              title: Configuration files to include.
              description: |
                This object defines configuration files that will be included from server. The key is configuration file
                name as defined in server and value is configuration object.
              type: object
              additionalProperties:
                type: [ boolean, object ]
                properties:
                  parameters_overwrite:
                    title: Parameters overwriting
                    description: Specifies whether parameters should be overwritten or just merged.
                    type: boolean
                  parameters:
                    '#/$defs/parameters'
      actions:
        title: Array of actions to run
        description: |
          Actions are core of the execution. It defines the full workflow that is being done. It uses services to do
          the actual work. Actions define the specific actions that are being done like sending request and checking
          the expectations.
        type: array
        items:
          title: Action item
          description: |
            Each item can be either string if there are no action parameters or object if parameters need to be
            supplied. Action name can contain pointers to to predefined actions like expectation. This is separated
            by slashes.
          type: [ object, string ]
          patternProperties:
            "^expect/.*":
              $ref: '#/$defs/expectation'
            "^request/.*":
              type: object
              properties:
                path:
                  type: string
                method:
                  type: string
                headers:
                  type: object
                  additionalProperties:
                    type: string

  spec:
    title: Specification container
    description: |
      The specification contains configuration including set of instances that specify the actual work that is going
      to be executed.
    type: object
    properties:
      workspace:
        title: Workspace location
        description: |
          The workspace is a place where all the configuration and scripts are rendered from templates. It should be
          directory and this directory should be ignored by version control system (e.g. git).
        type: string
      instances:
        title: Spec instances
        description: |
          If array is provided, the it contains array of instance objects describing the work that is going to be done.
          If string is provided, the it is a directory or wildcard path containing set of instances where each file
          represent a single instance with the same structure as an instance object.
        type: [ array, string ]
        items:
          $ref: '#/$defs/instance'
