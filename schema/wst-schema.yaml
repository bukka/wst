$schema: "https://json-schema.org/draft/2020-12/schema"
title: JsonSchema for WST configuration
type: object
properties:
  version:
    title: WST configuration version
    description: The current version is 1.0. Internally the value is converted to string but number is accepted.
    type: [ string, number ]
  name:
    title: WST project name
    description: The name should be short as it might be used in some messages produced by WST.
    type: string
  description:
    title: WST project description
    description: The description should describe project purpose.
    type: string
  sandboxes:
    $ref: '#/$defs/sandboxes'
  servers:
    $ref: '#/$defs/servers'
  spec:
    $ref: '#/$defs/spec'

$defs:
  parameters:
    title: Parameters object
    description: |
      The parameters object is a map of parameters provided in various parts for customization. It can be a nested map
      if needed creating some sort of a tree structure. The leaves are always scalar values.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        oneOf:
          - type: [ string, number, boolean ]
          - $ref: '#/$defs/parameters'

  headers:
    title: HTTP Headers
    description: Map of HTTP headers where key is header name and value is its value.
    type: object
    patternProperties:
      "^[a-zA-Z_][a-z0-9_]+$":
        title: Header value
        type: string

  outputExpectation:
    title: Output expectation action
    description: |
      The output expectation checks the service's output, which usually contains the service logs. This allows
      for the verification of the expected service behavior.
    type: object
    properties:
      order:
        title: Expected order of messages
        description: |
          This defines the expected order of messages when there are multiple messages in an array. It specifies
          whether these messages need to be in a fixed sequence or can appear in any order.
        type: string
        enum: [ fixed, random ]
        default: fixed
      match:
        title: Match type for each message
        type: string
        enum: [ exact, regexp ]
        default: exact
      messages:
        title: Array of expected messages
        type: array
        items:
          title: Message item
          description: |
            Each message item should be either an exact string or a regular expression that matches the actual
            string.
          type: string
      render_template:
        title: Template rendering switch
        description: |
          This switch selects whether template rendering is used for messages.
        type: boolean
        default: true

  responseExpectation:
    title: Response expectation action
    description: |
      The response expectation allows verifying the response from the selected request.
    type: object
    properties:
      request:
        title: Request ID
        description: |
          The request ID identifies the request whose response is checked in this expectation. The default last value
          matches the default request ID of the request action which means that if there is just one request being
          done and its ID is unchanged, then there is no need to specify this property.
        type: string
        default: last
      headers:
        $ref: '#/$defs/headers'
      body:
        title: Response body to match
        description: |
          The response body is the expected body for the response of the selected request.
        type: [ object, string ]
        properties:
          content:
            title: Response body content to match
            description: |
              The content represents the content or pattern that needs to match the actual request response. It should
              be a string but number is also allowed for easier configuration if only number is returned.
            type: [ string, number ]
          match:
            title: Match type for content
            type: string
            enum: [ exact, regexp ]
            default: exact
          render_template:
            title: Template rendering switch
            description: |
              The switch selects whether the template rendering is used for body content.
            type: boolean
            default: true

  expectation:
    title: Expectation action
    description: |
      The expectation is an action type that checks whether the provided expectation type aligns with what's expected.
      It's usually used for pattern matching of response data or output from the logs.
    type: object
    allOf:
      - properties:
          parameters:
            $ref: '#/$defs/parameters'
      - oneOf:
          - properties:
              output:
                $ref: '#/$defs/outputExpectation'
          - properties:
              response:
                $ref: '#/$defs/responseExpectation'

  expectations:
    title: Expectations mapping
    description: |
      The expectations mapping object allows for the definition of custom expectations that can be executed by actions.
      As noted in the actions' descriptions, the action name can be composed of various parts. In the case of
      expectations, it's formatted as follows:

      expect[/<server_name>/<expectation_name>]

      Here, <server_name> is the name of the server where the expectation is defined, and <expectation_name>
      corresponds to the name matching the key of this object.
    type: object
    additionalProperties:
      $ref: '#/$defs/expectation'

  sandboxEvent:
    title: Sandbox event
    description: |
      The sandbox event defines an action for a specific sandbox event on the service. It allows for the definition of
      a command, a signal, or a native event.
    type: object
    oneOf:
      - properties:
          native:
            title: Native sandbox event
            description: |
              The native event is a method provided by the sandbox itself for a specific event. For instance, it's used
              for containers to natively restart the application.
            type: object
            properties:
              event:
                title: 'Native sandbox event type'
                type: string
                enum: [ 'start', 'restart', 'stop' ]
      - properties:
          command:
            title: Command sandbox event
            description: |
              This property represents the shell command that gets executed.
            type: object
            oneOf:
              - properties:
                  executable:
                    title: Program path to execute
                    description: |
                      The executable is a single program to execute.
                    type: string
                  args:
                    title: Program arguments
                    description: |
                      The arguments can be either a string, in which case a shell is used, or an array of strings, which
                      executes the program directly without using the shell.
                    type: [ string, array ]
                    items:
                      type: string
              - properties:
                  shell:
                    title: Full shell command
                    description: |
                      This property represents the stringified version of the executable and its arguments.
                    type: string
      - properties:
          signal:
            title: Signal sandbox event
            description: |
              The signal sent to the sandbox service. It uses the service PID to send the signal. Note that the service
              needs to be running; hence, it can't be used for the start event.
            type: string

  commonSandbox:
    title: Common sandbox events
    description: |
      This object defines a set of common sandbox events. These are start, stop, and reload actions.
    type: object
    properties:
      events:
        type: object
        properties:
          start:
            $ref: '#/$defs/sandboxEvent'
          stop:
            $ref: '#/$defs/sandboxEvent'
          reload:
            $ref: '#/$defs/sandboxEvent'

  containerSandbox:
    title: Container sandbox events
    description: |
      The container sandbox serves as a base sandbox for all sandboxes that run OCI containers.
    allOf:
      - $ref: '#/$defs/commonSandbox'
      - title: Container specific properties
        type: object
        properties:
          image:
            oneOf:
              - title: Image name and tag
                type: string
              - type: object
                properties:
                  name:
                    title: Image name
                    type: string
                  tag:
                    title: Image tag
                    type: string
          registry:
            title: Container registry
            description: |
              This property is used to pull and push images from and to the registry.
            type: object
            properties:
              auth:
                title: Registry authentication credentials
                type: object
                properties:
                  username:
                    title: Registry user username
                    type: string
                  password:
                    title: Registry user password
                    type: string

  sandboxes:
    title: Sandboxes definitions
    description: |
      Sandboxes can be specified either as an object defining the used sandboxes or as a string representing a path to
      fetch sandbox definitions from.
    type: [ object, string ]
    properties:
      common:
        $ref: '#/$defs/commonSandbox'
      local:
        $ref: '#/$defs/commonSandbox'
      docker:
        $ref: '#/$defs/containerSandbox'
      kubernetes:
        allOf:
          - $ref: '#/$defs/containerSandbox'
          - type: object
            properties:
              auth:
                title: Kubernetes authentication
                type: object
                properties:
                  kubeconfig:
                    title: Kubernetes config file path
                    type: string

  server:
    title: Server
    description: |
      A server can be specified either as an object defining the server properties or as a server name string.
    type: [ object, string ]
    properties:
      extends:
        title: Parent server name
        description: |
          This property selects the parent server to inherit properties from.
        type: string
      name:
        title: Server name
        type: string
      configs:
        title: Configuration files
        type: object
        additionalProperties:
          type: object
          properties:
            file:
              type: string
            parameters:
              $ref: '#/$defs/parameters'
      parameters:
        $ref: '#/$defs/parameters'
      expectations:
        $ref: '#/$defs/expectations'
      sandboxes:
        $ref: '#/$defs/sandboxes'

  servers:
    title: Servers
    description: |
      Servers can be specified either as an object defining each server or as a string, which is a path to fetch
      server definitions from.
    type: [ object, string ]
    patternProperties:
      "^[a-z][a-z0-9-_]+$":
        $ref: '#/$defs/server'

  scripts:
    title: Scripts for inclusion in services
    description: |
      Scripts represent a set of files where the filename is an object key and its actual content is the value.
      These scripts can be linked to services.
    type: object
    additionalProperties:
      type: string

  services:
    title: Set of instance-specific services
    description: |
      The services represent an object of services where the key is its name and the value is a service object.
    type: object
    additionalProperties:
      title: Service to run
      description: |
        The service is a combination of a server and a sandbox with a supplied configuration.
      type: object
      properties:
        server:
          title: Server to use
          description: |
            Server points to the server used by the service. As the server defines the configuration, it's
            important to ensure that a compatible server is used. The service name is used if the value isn't
            specified.
          type: string
        sandbox:
          title: Sandbox to use
          description: |
            Sandbox should define the server sandbox in which to run the service.
          default: local
          type: string
          enum: [ local, docker, kubernetes ]
        scripts:
          title: Scripts included in the service
          description: |
            The scripts can have either a boolean or array value. If a boolean is provided, then 'true' means that
            all scripts are included in the service and 'false' means that no scripts will be included. If an array
            is provided, then only the listed scripts are included in the service.
          default: true
          type: [ array, boolean ]
          items:
            type: string
        configs:
          title: Configuration files to include
          description: |
            This object defines the configuration files that will be included from the server. The key is the
            configuration filename as defined in the server, and the value is the configuration object.
          type: object
          additionalProperties:
            type: [ boolean, object ]
            properties:
              overwrite_parameters:
                title: Parameters overwriting
                description: Specifies whether parameters should be overwritten or just merged.
                type: boolean
              parameters:
                '#/$defs/parameters'

  request:
    title: Request object
    description: |
      The request object defines the details of the request to be sent.
    type: object
    properties:
      id:
        title: Request ID
        type: string
      path:
        title: Request path
        type: string
      method:
        title: Request method
        type: string
      headers:
        '#/$defs/headers'

  actionItem:
    title: Action item
    description: |
      Each item can either represent a predefined action (as a string) or a custom action (as an object). When using
      predefined actions like expectations and requests, the action names are given as strings with its constituent
      parts separated by slashes.
      
      When these items are executed, if any failure occurs, the execution is halted and the error is reported. In some
      cases, an action may generate a result value that can be utilized by subsequent action items.
      
      Among these actions, there are two special types. The 'not' action performs a logical negation on the result of
      the action item it is associated with. This means if the associated action fails, it is treated as a success and
      the execution of further items continues without reporting an error.
      The 'parallel' action takes an array of actions and executes them simultaneously. The 'parallel' action only
      completes when the last of its parallel actions ends. If any action within 'parallel' fails, that particular
      action is stopped, but others continue their execution.
    type: [ object, string ]
    properties:
      not:
        $ref: '#/$defs/actionItem'
      parallel:
        $ref: '#/$defs/actions'
    patternProperties:
      "^expect/.*":
        $ref: '#/$defs/expectation'
      "^request/.*":
        $ref: '#/$defs/request'

  actions:
    title: Array of actions to run
    description: |
      Actions form the core of the execution. They define the full workflow that's being executed and utilize
      services to carry out the actual work. Actions specify the particular activities that occur, such as sending
      a request or verifying expectations.
    type: array
    items:
      $ref: '#/$defs/actionItem'

  instance:
    title: Instance object
    description: |
      The instance defines the scripts, services, and actions used on them. It can be used for defining tests and
      other tasks.
    type: object
    properties:
      scripts:
        $ref: '#/$defs/scripts'
      services:
        $ref: '#/$defs/services'
      actions:
        $ref: '#/$defs/actions'

  spec:
    title: Specification container
    description: |
      The specification contains the configuration, including a set of instances, that specify the actual tasks that
      are going to be executed.
    type: object
    properties:
      workspace:
        title: Workspace location
        description: |
          The workspace is a location where all the configuration and scripts are rendered from templates. It should
          be a directory, and this directory should be ignored by the version control system (e.g., git).
        type: string
      instances:
        title: Spec instances
        description: |
          If an array is provided, it contains an array of instance objects that describe the work going to be done.
          If a string is provided, it's a directory or wildcard path containing a set of instances. In this case,
          each file represents a single instance, with the same structure as an instance object.
        type: [ array, string ]
        items:
          $ref: '#/$defs/instance'