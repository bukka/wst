// Code generated by mockery v2.40.1. DO NOT EDIT.

package factory

import (
	factory "github.com/bukka/wst/conf/parser/factory"
	mock "github.com/stretchr/testify/mock"
)

// MockFunctions is an autogenerated mock type for the Functions type
type MockFunctions struct {
	mock.Mock
}

type MockFunctions_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFunctions) EXPECT() *MockFunctions_Expecter {
	return &MockFunctions_Expecter{mock: &_m.Mock}
}

// GetFactoryFunc provides a mock function with given fields: funcName
func (_m *MockFunctions) GetFactoryFunc(funcName string) factory.Func {
	ret := _m.Called(funcName)

	if len(ret) == 0 {
		panic("no return value specified for GetFactoryFunc")
	}

	var r0 factory.Func
	if rf, ok := ret.Get(0).(func(string) factory.Func); ok {
		r0 = rf(funcName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(factory.Func)
		}
	}

	return r0
}

// MockFunctions_GetFactoryFunc_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFactoryFunc'
type MockFunctions_GetFactoryFunc_Call struct {
	*mock.Call
}

// GetFactoryFunc is a helper method to define mock.On call
//   - funcName string
func (_e *MockFunctions_Expecter) GetFactoryFunc(funcName interface{}) *MockFunctions_GetFactoryFunc_Call {
	return &MockFunctions_GetFactoryFunc_Call{Call: _e.mock.On("GetFactoryFunc", funcName)}
}

func (_c *MockFunctions_GetFactoryFunc_Call) Run(run func(funcName string)) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockFunctions_GetFactoryFunc_Call) Return(_a0 factory.Func) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockFunctions_GetFactoryFunc_Call) RunAndReturn(run func(string) factory.Func) *MockFunctions_GetFactoryFunc_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFunctions creates a new instance of MockFunctions. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFunctions(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFunctions {
	mock := &MockFunctions{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
