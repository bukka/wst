// Code generated by mockery v2.40.1. DO NOT EDIT.

package app

import (
	afero "github.com/spf13/afero"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockEnv is an autogenerated mock type for the Env type
type MockEnv struct {
	mock.Mock
}

type MockEnv_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEnv) EXPECT() *MockEnv_Expecter {
	return &MockEnv_Expecter{mock: &_m.Mock}
}

// Fs provides a mock function with given fields:
func (_m *MockEnv) Fs() afero.Fs {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Fs")
	}

	var r0 afero.Fs
	if rf, ok := ret.Get(0).(func() afero.Fs); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(afero.Fs)
		}
	}

	return r0
}

// MockEnv_Fs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Fs'
type MockEnv_Fs_Call struct {
	*mock.Call
}

// Fs is a helper method to define mock.On call
func (_e *MockEnv_Expecter) Fs() *MockEnv_Fs_Call {
	return &MockEnv_Fs_Call{Call: _e.mock.On("Fs")}
}

func (_c *MockEnv_Fs_Call) Run(run func()) *MockEnv_Fs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_Fs_Call) Return(_a0 afero.Fs) *MockEnv_Fs_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnv_Fs_Call) RunAndReturn(run func() afero.Fs) *MockEnv_Fs_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserHomeDir provides a mock function with given fields:
func (_m *MockEnv) UserHomeDir() (string, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UserHomeDir")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func() (string, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEnv_GetUserHomeDir_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UserHomeDir'
type MockEnv_GetUserHomeDir_Call struct {
	*mock.Call
}

// GetUserHomeDir is a helper method to define mock.On call
func (_e *MockEnv_Expecter) GetUserHomeDir() *MockEnv_GetUserHomeDir_Call {
	return &MockEnv_GetUserHomeDir_Call{Call: _e.mock.On("UserHomeDir")}
}

func (_c *MockEnv_GetUserHomeDir_Call) Run(run func()) *MockEnv_GetUserHomeDir_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_GetUserHomeDir_Call) Return(_a0 string, _a1 error) *MockEnv_GetUserHomeDir_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnv_GetUserHomeDir_Call) RunAndReturn(run func() (string, error)) *MockEnv_GetUserHomeDir_Call {
	_c.Call.Return(run)
	return _c
}

// Logger provides a mock function with given fields:
func (_m *MockEnv) Logger() *zap.SugaredLogger {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Logger")
	}

	var r0 *zap.SugaredLogger
	if rf, ok := ret.Get(0).(func() *zap.SugaredLogger); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.SugaredLogger)
		}
	}

	return r0
}

// MockEnv_Logger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logger'
type MockEnv_Logger_Call struct {
	*mock.Call
}

// Logger is a helper method to define mock.On call
func (_e *MockEnv_Expecter) Logger() *MockEnv_Logger_Call {
	return &MockEnv_Logger_Call{Call: _e.mock.On("Logger")}
}

func (_c *MockEnv_Logger_Call) Run(run func()) *MockEnv_Logger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockEnv_Logger_Call) Return(_a0 *zap.SugaredLogger) *MockEnv_Logger_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockEnv_Logger_Call) RunAndReturn(run func() *zap.SugaredLogger) *MockEnv_Logger_Call {
	_c.Call.Return(run)
	return _c
}

// LookupEnvVar provides a mock function with given fields: key
func (_m *MockEnv) LookupEnvVar(key string) (string, bool) {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for LookupEnvVar")
	}

	var r0 string
	var r1 bool
	if rf, ok := ret.Get(0).(func(string) (string, bool)); ok {
		return rf(key)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// MockEnv_LookupEnvVar_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LookupEnvVar'
type MockEnv_LookupEnvVar_Call struct {
	*mock.Call
}

// LookupEnvVar is a helper method to define mock.On call
//   - key string
func (_e *MockEnv_Expecter) LookupEnvVar(key interface{}) *MockEnv_LookupEnvVar_Call {
	return &MockEnv_LookupEnvVar_Call{Call: _e.mock.On("LookupEnvVar", key)}
}

func (_c *MockEnv_LookupEnvVar_Call) Run(run func(key string)) *MockEnv_LookupEnvVar_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockEnv_LookupEnvVar_Call) Return(_a0 string, _a1 bool) *MockEnv_LookupEnvVar_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockEnv_LookupEnvVar_Call) RunAndReturn(run func(string) (string, bool)) *MockEnv_LookupEnvVar_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockEnv creates a new instance of MockEnv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockEnv(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockEnv {
	mock := &MockEnv{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
